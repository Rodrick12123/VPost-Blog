@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> loginManager
@model Blog.Models.ViewModels.BlogDetails
@inject UserManager<IdentityUser> userManager

@{
    ViewData["Title"] = Model.PageTitle;
}


<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-12 col-lg-8"> <!-- Increased column width for larger screens -->
            @if(Model != null)
            {
                <div class="blog-details">
                    <h1 class="mb-4">@Model.Heading</h1>
                    <div class="d-flex justify-content-between mb-4">
                        <span class="text-secondary">@Model.Author</span>
                        <span class="text-secondary">@Model.PublishedDate</span>
                    </div>

                    <div id="like-container" class="mb-4">
                        @if (loginManager.IsSignedIn(User))
                        {
                            <a id="like" class="btn btn-dark" style="cursor:pointer">
                                <i class="bi bi-heart-fill"></i>
                            </a>
                        }
                        <span id="likes">@Model.LikeTotal likes</span>
                    </div>

                    <div class="mb-4">
                        @foreach (var tag in Model.Tags)
                        {
                            <span class="badge bg-secondary me-1">@tag.Name</span>
                        }
                    </div>
                    @if(Model.FeaturedImageUrl != null)
                    {
                        <img src="@Model.FeaturedImageUrl" class="img-fluid mb-4" alt="Featured Image" />

                    }

                    <div class="mb-4 blog-content">
                        @Html.Raw(Model.Content)
                    </div>

                    <div class="card mb-4">
                        <div class="card-header">
                            <h4>Comments</h4>
                            @if (loginManager.IsSignedIn(User))
                            {
                                <form method="post">
                                    <div class="mb-3">
                                        <label class="form-label">Comment Here</label>
                                        <input type="text" class="form-control" asp-for="CommentDescription"/>
                                        <input type="hidden" asp-for="Id"/>
                                        <input type="hidden" asp-for="UrlHandle"/>
                                    </div>

                                    <div class="mb-3">
                                        <button type="submit" class="btn btn-dark">Submit</button>
                                        <a class="btn btn-danger" asp-area="" asp-action="Response" asp-controller="Blog" asp-route-urlHandel="@Model.UrlHandle">Make Super Comment</a>
                                    </div>
                                </form>
                            }
                        </div>
                        <div class="card-body">
                            @if(Model.Comments != null && Model.Comments.Any())
                            {
                                @foreach(var comment in Model.Comments)
                                {
                                    <div class="mb-3 card">
                                        <div class="card-body">
                                            <div class="d-flex justify-content-between">
                                                <span class="text-secondary">@comment.UserName</span>
                                                <span class="text-secondary">@comment.CommentDate</span>
                                            </div>
                                            <div>
                                                @comment.Description
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            }
            else
            {
                <p>Blog not found!</p>
            }
        </div>
    </div>
</div>

@section Scripts{
    <script>
        const likeButtonElement = document.getElementById("like");
        const totalLikesElement = document.getElementById("likes");

        //const unLikeElement = document.getElementById("unlike");
        //ToDo: Total likes and hearts needs to dynamically change.
        async function getLikeTotal(){
            console.log("Get")
            fetch('/api/BlogLike/@Model.Id/GetTotalLikes', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': '*/*'
                }
            }).then(data => data.json()).then(result => totalLikesElement.innerHTML = result)
                .then(() => {
                    location.reload();
                });
        }
        async function addBlogLike() {
            console.log("clicked")
            fetch('/api/BlogLike/Add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': '*/*'
                },
                body: JSON.stringify({ BlogPostId: '@Model.Id', UserId: '@userManager.GetUserId(User)' })
            }).then(() => {
                    likeButtonElement.innerHTML = ' <i class="bi bi-heart-fill"></i>';
                    likeButtonElement.removeEventListener('click', addBlogLike);

                    getLikeTotal();
                });

        }
        async function removeBlogLike() {
            console.log("remove")
            fetch('/api/BlogLike/Remove', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': '*/*'
                },
                body: JSON.stringify({ BlogPostId: '@Model.Id', UserId: '@userManager.GetUserId(User)' })
            })
                .then(() => {
                    //likeButtonElement.innerHTML = ' <i class="bi bi-heart"></i>';
                    //unLikeElement.removeEventListener('click', removeBlogLike);

                    getLikeTotal();

                });
        }

        if ("@Model.Liked" == "True") {
            //unLikeElement.addEventListener('click', removeBlogLike);
            likeButtonElement.removeEventListener('click', addBlogLike);


        } else {
           // unLikeElement.removeEventListener('click', removeBlogLike);
           likeButtonElement.addEventListener('click', addBlogLike);

        }
    </script>
}
